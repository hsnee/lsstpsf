#!/bin/bash
#------------------------------------------------------------------------------
# Script to install a version of a code and declare it current.
#
# The version name should either be "cvs" or begin with the letter "c".
# If it is "cvs", then simply check-out the current (untagged) version
#   of the code, build it, copy it into a "cvs" subdirectory, and
#   declare it current.
# If it is an actual tagged version, then cvs-export that version,
#   build it, install it using UPS, and declare it current.
# If the requested version of the code already exists, then simply declare
#   that version current.
#
# If you are installing products with inter-dependencies, be sure to
# install them in the order of those dependencies.  For example, since
# "idlspec2d" depends upon "idlutils", you would install them with:
#   % evilinstall idlutils v4_5_0
#   % setup idlutils
#   % evilinstall idlspec2d v4_5_0
#
# The CVS repository can be specified by setting the $CVSROOT environment
# variable.  If not set, then set to the default CVS repository at Princeton.
#
# If installing the "idlutils" product, then build with "evilmake"
# in that product.  Otherwise, if "idlutils" is setup up, then use "evilmake".
# Otherwise, if "sdsstools" is set up, then use "sdssmake".
# Finally, simply use "make" in any other cases.
#
# This script tries to set-up products using the table file in the /ups
# subdirectory of the product.  If this file does not exist, then a minimal
# version of that file is created.
#
# D. Schlegel & N. Padmanabhan, Princeton, 29 January 2003
#------------------------------------------------------------------------------

# Set the shell variable, which is needed for all EUPS commands.
export SHELL=/bin/bash

# Demand that both a product and version name are on the command line,
# and that the version name either be "cvs" or begin with the character "v".
if [ $# != 2 ] ; then
  echo
  echo "ABORT: Need to specify product and version on command line, i.e."
  echo "       \"evilinstall idlutils v4_5_0\""
  exit
fi
PRODNAME=$1
PRODVERS=$2
if [ $PRODVERS  != "cvs" ] && [ `echo $PRODVERS | awk '{print substr($1,1,1)}'` != "v" ] ; then
   echo
   echo "ABORT: Version name must either be \"cvs\" or begin with the character \"v\"."
   exit
fi

# Source EUPS setup
echo "Setting up EUPS....."
if [ -z $EUPS_DIR ]; then
    echo 
    echo "ABORT: EUPS not set up - either set it up, or set EUPS_DIR manually."
    exit
fi
source $EUPS_DIR/bin/setups.sh

if [ -z $EUPS_FLAVOR ]; then
    echo
    echo "ABORT: EUPS_FLAVOR not set - you must set this manually."
    exit
fi
DECLAREFLAVOR=$EUPS_FLAVOR
echo Setting from environment variable EUPS_FLAVOR=$EUPS_FLAVOR

if [ -z $EUPS_PATH ]; then
    echo
    echo "ABORT: EUPS_PATH not set."
    exit
fi

if [ -e /usr/bin/perl ] ; then
   echo
else
   echo
   echo "ABORT: The binary \"/usr/bin/perl\" must exist for"
   echo "       the \"eups_expandtable\" command to work.  Sorry!"
   echo "       Try putting in a symbolic link to perl and try again."
   exit
fi

#------------------------------------------------------------------------------
# Make sure this product+version isn't already declared, either in the
# current flavor or in the NULL flavor.

if [ -e $EUPS_PATH/$DECLAREFLAVOR/$PRODNAME/$PRODVERS ] ; then
   echo
   echo "This installation already appears to exist in " $EUPS_PATH/$DECLAREFLAVOR/$PRODNAME/$PRODVERS
   eups_make_table $PRODNAME $EUPS_PATH/$DECLAREFLAVOR/$PRODNAME/$PRODVERS
   echo "Now declaring this version current."
   eups_declare -f $DECLAREFLAVOR \
    -r $EUPS_PATH/$DECLAREFLAVOR/$PRODNAME/$PRODVERS -c $PRODNAME $PRODVERS
   exit
elif [ -e $EUPS_PATH/NULL/$PRODNAME/$PRODVERS ] ; then
   echo
   echo "This installation already appears to exist in " $EUPS_PATH/NULL/$PRODNAME/$PRODVERS
   eups_make_table $PRODNAME $EUPS_PATH/$DECLAREFLAVOR/$PRODNAME/$PRODVERS
   echo "Now declaring this version current."
   eups_declare -f $DECLAREFLAVOR \
    -r $EUPS_PATH/NULL/$PRODNAME/$PRODVERS -c $PRODNAME $PRODVERS
   exit
fi

#------------------------------------------------------------------------------
# If $CVSROOT is not set, then set it to the default CVS repository
# at Princeton.

if [ -z "$CVSROOT" ] ; then
   echo "Setting CVSROOT and CVS_RSH to default locations at Princeton"
   CVSROOT=spectro.princeton.edu:/usr/local/cvsroot
   CVS_RSH=ssh
fi

#------------------------------------------------------------------------------
# Make a temporary directory for building the code, and make certain
# that we can write to it.

TEMPDIR=$PWD
TEMPSUBDIR=$PRODNAME-$PRODVERS

#------------------------------------------------------------------------------
# If installing the "idlutils" product, then build with "evilmake"
# in that product.  Otherwise, if "idlutils" is setup up, then use "evilmake".
# Otherwise, if "sdsstools" is set up, then use "sdssmake".
# Finally, simply use "make" in any other cases.

if [ $PRODNAME = "idlutils" ] ; then
   MAKECOMMAND=$TEMPDIR/$TEMPSUBDIR/bin/evilmake
   MAKEINSTALLCOMMAND='make install'
   export SDSSTOOLS_DIR=$TEMPDIR/$TEMPSUBDIR
elif [ -e "$IDLUTILS_DIR/bin/evilmake" ] ; then
   MAKECOMMAND=$IDLUTILS_DIR/bin/evilmake
   MAKEINSTALLCOMMAND='make install'
   export SDSSTOOLS_DIR=$IDLUTILS_DIR
elif [ -e "$SDSSTOOLS_DIR/bin/sdssmake" ] ; then
# We no longer use sdssmake for any IDL-dependent products.
#   MAKECOMMAND='sdssmake -idl -opt -debug'
   MAKECOMMAND='sdssmake -opt -debug'
   MAKEINSTALLCOMMAND='sdssmake install'
else
   MAKECOMMAND=make
   MAKEINSTALLCOMMAND='make install'
fi

echo "Setting SDSSTOOLS_DIR=$SDSSTOOLS_DIR"
echo "Setting MAKEINSTALLCOMMAND=$MAKEINSTALLCOMMAND"
echo "Setting MAKECOMMAND=$MAKECOMMAND"

#------------------------------------------------------------------------------
# Check-out the code from the CVS repository.

cd $TEMPDIR
if [ $PRODVERS = "cvs" ] ; then
   echo "cvs co -R -d $TEMPSUBDIR $PRODNAME"
   cvs co -R -d $TEMPSUBDIR $PRODNAME
else
   echo "cvs export -R -d $TEMPSUBDIR -r $PRODVERS $PRODNAME"
   cvs export -R -d $TEMPSUBDIR -r $PRODVERS $PRODNAME
fi
# If the cvs check-out failed (for example, if this version does not exist),
# then exit.
if [ ! -d $TEMPSUBDIR ] ; then
   echo
   echo "ABORT: Could not cvs check-out verson $PRODVERS of $PRODNAME"
   echo "       from the repository CVSROOT=$CVSROOT"
   exit
fi

#------------------------------------------------------------------------------
# Find the table file if it exists.  Otherwise, create a minimal table file.

eups_make_table $PRODNAME $TEMPDIR/$TEMPSUBDIR
TABLEPARAM="-m $PRODNAME.table"
echo Setting TABLEPARAM=$TABLEPARAM

#------------------------------------------------------------------------------
# Determine if the flavor is NULL, which is a special case.

TABLEFILE=$TEMPDIR/$TEMPSUBDIR/ups/$PRODNAME.table
echo Setting TABLEFILE=$TABLEFILE
tableflavor=`awk 'BEGIN{FS=" ="}{if (toupper($1) ~ "FLAVOR") {print $2}}' $TABLEFILE | head -1 | sed 's/ //g'`
echo Table flavor=\"$tableflavor\"
if [ "$tableflavor" = "NULL" ] ; then
   INSTALLFLAVOR=$tableflavor
   DECLAREFLAVOR=$tableflavor
else
   INSTALLFLAVOR=$DECLAREFLAVOR
fi

#------------------------------------------------------------------------------
# Create the top-level directory of the appropriate flavor in which
# to install this product (if it does not yet exist).

MYSDSS_ROOT=$EUPS_PATH/$INSTALLFLAVOR/$PRODNAME
echo "Installing PRODNAME=$PRODNAME PRODVERS=$PRODVERS FLAVOR=$DECLAREFLAVOR".
echo "Installing in the directory $MYSDSS_ROOT"

if [ ! -d $MYSDSS_ROOT ] ; then
   \mkdir -p $MYSDSS_ROOT
fi
if [ ! -d $MYSDSS_ROOT ] ; then
    echo "ABORT: Unable to create directory $MYSDSS_ROOT"
    exit
fi
touch $MYSDSS_ROOT/thisisatest
if [ -e $MYSDSS_ROOT/thisisatest ] ; then
   rm -f $MYSDSS_ROOT/thisisatest
else
   echo
   echo "ABORT: Unable to create files in the directory $MYSDSS_ROOT"
   exit
fi

#------------------------------------------------------------------------------
# The following ups commands are to set up any dependencies needed
# to build the code.

echo "eups_declare -f $DECLAREFLAVOR $TABLEPARAM -r $TEMPDIR/$TEMPSUBDIR $PRODNAME $PRODVERS"
eups_declare -f $DECLAREFLAVOR $TABLEPARAM \
 -r $TEMPDIR/$TEMPSUBDIR $PRODNAME $PRODVERS
echo "setup -f $DECLAREFLAVOR $PRODNAME $PRODVERS"
setup -f $DECLAREFLAVOR $PRODNAME $PRODVERS
# The following nasty line is simply to set up the environment
# variable {$PRODNAME}_DIR so that the code can be built.
eval export `echo $PRODNAME | perl -pe 'y/a-z/A-Z/'`_DIR=$TEMPDIR/$TEMPSUBDIR
echo Setting temporary directory to $TEMPDIR/$TEMPSUBDIR

#------------------------------------------------------------------------------
# Now build and install the code!!

cd $TEMPDIR/$TEMPSUBDIR
if [ -e configure ] ; then
   echo Running the configure script
   ./configure
fi
$MAKECOMMAND

# The following nasty line is simply to set up the environment
# variable {$PRODNAME}_DIR so that the code can be installed.
# Also, set the variable {$PRODNAME}_INSTALL_DIR to the same thing,
# since the sdsstools product seems to use that instead.
eval export `echo $PRODNAME | perl -pe 'y/a-z/A-Z/'`_DIR=$MYSDSS_ROOT/$PRODVERS
eval export `echo $PRODNAME | perl -pe 'y/a-z/A-Z/'`_INSTALL_DIR=$MYSDSS_ROOT/$PRODVERS
if [ $PRODVERS = "cvs" ] ; then
   echo cp -r $TEMPDIR/$TEMPSUBDIR $MYSDSS_ROOT/$PRODVERS
   cp -r $TEMPDIR/$TEMPSUBDIR $MYSDSS_ROOT/$PRODVERS
else
   # It appears that sometimes we need to create the install directory,
   # specifically when running "sdssmake install", or when the product
   # is sdsstools.  This is a hack!!
   if [ "$MAKEINSTALLCOMMAND" = "sdssmake install" ] || [ $PRODNAME = "sdsstools" ] ; then
      echo "Creating output directory: $MYSDSS_ROOT/$PRODVERS"
      \mkdir -p $MYSDSS_ROOT/$PRODVERS
      sleep 1
   fi

   # Run the install command
   echo "Setting SDSSTOOLS_DIR=$SDSSTOOLS_DIR"
   echo "Setting MAKEINSTALLCOMMAND=$MAKEINSTALLCOMMAND"
   echo "Setting MAKECOMMAND=$MAKECOMMAND"
   $MAKEINSTALLCOMMAND

   # If nothing exists in the install directory, then simply copy
   # all the files of the product to that target directory.
   anyfiles=`ls $MYSDSS_ROOT/$PRODVERS 2> /dev/null`
   if [ -z "$anyfiles" ] ; then
      echo No files found in target directory
      if [ -e $MYSDSS_ROOT/$PRODVERS ] ; then
         \rmdir $MYSDSS_ROOT/$PRODVERS
      fi
      echo cp -r $TEMPDIR/$TEMPSUBDIR $MYSDSS_ROOT/$PRODVERS
      cp -r $TEMPDIR/$TEMPSUBDIR $MYSDSS_ROOT/$PRODVERS
   else
      echo Files successfully found in target directory
   fi

   # Copy the table file into the install directory, even if the
   # make/install command did not do so.
   if [ ! -e $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table ] ; then
      cp $TABLEFILE $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table
   fi
   # Now expand the table file
   # eups_expandtable should not attempt to override any previously
   # set versions
   mv $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table.old
   echo "The current table file has been saved in $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table.old"
   eups_expandtable $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table.old > $MYSDSS_ROOT/$PRODVERS/ups/$PRODNAME.table 
fi

#------------------------------------------------------------------------------
# Declare this version and make it current.
# No need to do an undeclare first since it is automatic with EUPS .

eups_declare -f $DECLAREFLAVOR $TABLEPARAM \
 -r $INSTALLFLAVOR/$PRODNAME/$PRODVERS -c $PRODNAME $PRODVERS --force

#------------------------------------------------------------------------------
# Finally, delete the temporary directory used to build the code.

\rm -rf $TEMPDIR/$TEMPSUBDIR

exit
#------------------------------------------------------------------------------
